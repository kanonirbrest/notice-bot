# -*- coding: utf-8 -*-
import os
import requests
import io
import tempfile
from dotenv import load_dotenv
import telebot

load_dotenv()

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
ELEVENLABS_API_KEY = os.getenv('ELEVENLABS_API_KEY')
ELEVENLABS_API_URL = "https://api.elevenlabs.io/v1"

# –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤ ElevenLabs (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
ELEVENLABS_VOICES = {
    'male': 'pNInz6obpgDQGcFmaJgB',  # Adam - –º—É–∂—Å–∫–æ–π
    'female': 'EXAVITQu4vr4xnSDxMaL',  # Bella - –∂–µ–Ω—Å–∫–∏–π
    'child': 'VR6AewLTigWG4xSOukaG',  # Josh - –¥–µ—Ç—Å–∫–∏–π
    'elderly': 'pNInz6obpgDQGcFmaJgB',  # Adam - –ø–æ–∂–∏–ª–æ–π
    'robot': 'VR6AewLTigWG4xSOukaG',  # Josh - —Ä–æ–±–æ—Ç
    'deep': 'pNInz6obpgDQGcFmaJgB',  # Adam - –≥–ª—É–±–æ–∫–∏–π
    'high': 'EXAVITQu4vr4xnSDxMaL',  # Bella - –≤—ã—Å–æ–∫–∏–π
    'fast': 'VR6AewLTigWG4xSOukaG',  # Josh - –±—ã—Å—Ç—Ä—ã–π
    'slow': 'pNInz6obpgDQGcFmaJgB',  # Adam - –º–µ–¥–ª–µ–Ω–Ω—ã–π
}
DEFAULT_VOICE = 'male'

bot = telebot.TeleBot(TELEGRAM_TOKEN)

def download_voice_file(file_id):
    try:
        file_info = bot.get_file(file_id)
        file_url = f"https://api.telegram.org/file/bot{TELEGRAM_TOKEN}/{file_info.file_path}"
        response = requests.get(file_url)
        response.raise_for_status()
        return io.BytesIO(response.content)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return None

def speech_to_text(audio_bytes):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ ElevenLabs Speech-to-Text"""
    try:
        headers = {
            'xi-api-key': ELEVENLABS_API_KEY
        }
        
        files = {
            'audio': ('voice.ogg', audio_bytes, 'audio/ogg')
        }
        
        response = requests.post(
            f"{ELEVENLABS_API_URL}/speech-to-text",
            headers=headers,
            files=files,
            timeout=60
        )
        
        if response.status_code == 200:
            return response.json().get('text', '')
        else:
            print(f"–û—à–∏–±–∫–∞ STT: {response.status_code} - {response.text}")
            return None
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ —Ç–µ–∫—Å—Ç: {e}")
        return None

def text_to_speech(text, voice_id=DEFAULT_VOICE):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ —Ä–µ—á—å —á–µ—Ä–µ–∑ ElevenLabs"""
    try:
        headers = {
            'xi-api-key': ELEVENLABS_API_KEY,
            'Content-Type': 'application/json'
        }
        
        data = {
            'text': text,
            'model_id': 'eleven_multilingual_v2',
            'voice_settings': {
                'stability': 0.5,
                'similarity_boost': 0.5
            }
        }
        
        response = requests.post(
            f"{ELEVENLABS_API_URL}/text-to-speech/{ELEVENLABS_VOICES.get(voice_id, ELEVENLABS_VOICES[DEFAULT_VOICE])}",
            headers=headers,
            json=data,
            timeout=60
        )
        
        if response.status_code == 200:
            return response.content
        else:
            print(f"–û—à–∏–±–∫–∞ TTS: {response.status_code} - {response.text}")
            return None
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ —Ä–µ—á—å: {e}")
        return None

def elevenlabs_transform(audio_bytes, voice_type=DEFAULT_VOICE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ ElevenLabs: STT -> TTS —Å –Ω–æ–≤—ã–º –≥–æ–ª–æ—Å–æ–º"""
    try:
        # –®–∞–≥ 1: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç
        print("üé§ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç...")
        text = speech_to_text(audio_bytes)
        
        if not text:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å")
            return None
        
        print(f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}")
        
        # –®–∞–≥ 2: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ä–µ—á—å —Å –Ω–æ–≤—ã–º –≥–æ–ª–æ—Å–æ–º
        print(f"üé≠ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤ —Ä–µ—á—å —Å –≥–æ–ª–æ—Å–æ–º: {voice_type}")
        audio_result = text_to_speech(text, voice_type)
        
        if audio_result:
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —á–µ—Ä–µ–∑ ElevenLabs!")
            return audio_result
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—á—å")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ—Ä–µ–∑ ElevenLabs: {e}")
        return None

@bot.message_handler(commands=['start'])
def start(message):
    bot.reply_to(message, (
        "üé≠ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥–æ–ª–æ—Å–∞ —á–µ—Ä–µ–∑ ElevenLabs.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —è –∏–∑–º–µ–Ω—é –µ–≥–æ –Ω–∞ –¥—Ä—É–≥–æ–π –≥–æ–ª–æ—Å!\n\n"
        "/voices ‚Äî —Å–ø–∏—Å–æ–∫ –≥–æ–ª–æ—Å–æ–≤\n"
        "/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞"
    ))

@bot.message_handler(commands=['help'])
def help_command(message):
    bot.reply_to(message, (
        "üé≠ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:\n\n"
        "1. –û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "2. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –º—É–∂—Å–∫–æ–π –≥–æ–ª–æ—Å\n"
        "3. –ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ–ª–æ—Å, –Ω–∞–ø–∏—à–∏ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –ø–æ–¥–ø–∏—Å–∏ –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /voice <—Ç–∏–ø>\n\n"
        "/voices ‚Äî —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤"
    ))

@bot.message_handler(commands=['voices'])
def voices_command(message):
    voices_list = "\n".join([f"‚Ä¢ {voice} - {desc}" for voice, desc in {
        'male': '–ú—É–∂—Å–∫–æ–π –≥–æ–ª–æ—Å',
        'female': '–ñ–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å', 
        'child': '–î–µ—Ç—Å–∫–∏–π –≥–æ–ª–æ—Å',
        'elderly': '–ü–æ–∂–∏–ª–æ–π –≥–æ–ª–æ—Å',
        'robot': '–†–æ–±–æ—Ç',
        'deep': '–ì–ª—É–±–æ–∫–∏–π –≥–æ–ª–æ—Å',
        'high': '–í—ã—Å–æ–∫–∏–π –≥–æ–ª–æ—Å',
        'fast': '–ë—ã—Å—Ç—Ä–∞—è —Ä–µ—á—å',
        'slow': '–ú–µ–¥–ª–µ–Ω–Ω–∞—è —Ä–µ—á—å'
    }.items()])
    
    bot.reply_to(message, (
        f"üé≠ –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞ ElevenLabs:\n\n{voices_list}\n\n"
        "–ü—Ä–∏–º–µ—Ä: –æ—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å –ø–æ–¥–ø–∏—Å—å—é 'female' –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /voice female"
    ))

# –•—Ä–∞–Ω–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ–ª–æ—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_voice = {}

@bot.message_handler(commands=['voice'])
def set_voice(message):
    voice_type = message.text.split(maxsplit=1)[-1].strip().lower()
    if voice_type in ELEVENLABS_VOICES:
        user_voice[message.from_user.id] = voice_type
        bot.reply_to(message, f"‚úÖ –ì–æ–ª–æ—Å –¥–ª—è –≤–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {voice_type}")
    else:
        bot.reply_to(message, f"‚ùå –ì–æ–ª–æ—Å '{voice_type}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /voices –¥–ª—è —Å–ø–∏—Å–∫–∞.")

@bot.message_handler(content_types=['voice'])
def handle_voice(message):
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–æ–ª–æ—Å: –∏–∑ –ø–æ–¥–ø–∏—Å–∏ –∏–ª–∏ –∏–∑ user_voice, –∏–Ω–∞—á–µ –¥–µ—Ñ–æ–ª—Ç
        voice_type = DEFAULT_VOICE
        if message.caption and message.caption.lower() in ELEVENLABS_VOICES:
            voice_type = message.caption.lower()
        elif message.from_user.id in user_voice:
            voice_type = user_voice[message.from_user.id]
        
        processing_msg = bot.reply_to(message, f"üé≠ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º: {voice_type}...")
        voice_file = download_voice_file(message.voice.file_id)
        
        if not voice_file:
            bot.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", 
                                chat_id=processing_msg.chat.id, 
                                message_id=processing_msg.message_id)
            return
        
        result_audio = elevenlabs_transform(voice_file, voice_type)
        
        if result_audio:
            with tempfile.NamedTemporaryFile(suffix='.mp3', delete=False) as temp_file:
                temp_file.write(result_audio)
                temp_file_path = temp_file.name
            
            with open(temp_file_path, 'rb') as audio_file:
                bot.send_voice(message.chat.id, audio_file, 
                             caption=f"üé≠ –í–∞—à –≥–æ–ª–æ—Å —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º: {voice_type}")
            
            os.unlink(temp_file_path)
            bot.edit_message_text("‚úÖ –ì–æ—Ç–æ–≤–æ!", 
                                chat_id=processing_msg.chat.id, 
                                message_id=processing_msg.message_id)
        else:
            bot.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ ElevenLabs", 
                                chat_id=processing_msg.chat.id, 
                                message_id=processing_msg.message_id)
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ: {e}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ")

if __name__ == '__main__':
    print('üé≠ –ë–æ—Ç ElevenLabs –∑–∞–ø—É—â–µ–Ω!')
    print('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.')
    bot.polling(none_stop=True) 