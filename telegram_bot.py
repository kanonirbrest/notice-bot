# -*- coding: utf-8 -*-
import os
import requests
from dotenv import load_dotenv
import telebot

load_dotenv()

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')

bot = telebot.TeleBot(TELEGRAM_TOKEN)

def get_rhymes(word):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∏—Ñ–º—ã –∫ —Å–ª–æ–≤—É —á–µ—Ä–µ–∑ RhymeBrain API"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π RhymeBrain API
        url = f"https://rhymebrain.com/talk"
        params = {
            'function': 'getRhymes',
            'word': word,
            'lang': 'ru'
        }
        
        response = requests.get(url, params=params, timeout=10)
        response.raise_for_status()
        
        rhymes = response.json()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–∏—Ñ–º—ã –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
        filtered_rhymes = []
        for rhyme in rhymes:
            if rhyme.get('score', 0) > 0:  # –¢–æ–ª—å–∫–æ —Ä–∏—Ñ–º—ã —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Å–∫–æ—Ä–æ–º
                filtered_rhymes.append({
                    'word': rhyme.get('word', ''),
                    'score': rhyme.get('score', 0),
                    'freq': rhyme.get('freq', 0)
                })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–∫–æ—Ä—É (–∫–∞—á–µ—Å—Ç–≤—É —Ä–∏—Ñ–º—ã)
        filtered_rhymes.sort(key=lambda x: x['score'], reverse=True)
        
        return filtered_rhymes
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∏—Ñ–º: {e}")
        # Fallback –Ω–∞ Datamuse API
        try:
            url = f"https://api.datamuse.com/words"
            params = {
                'rel_rhy': word,
                'max': 10,
                'lang': 'ru'
            }
            
            response = requests.get(url, params=params, timeout=10)
            response.raise_for_status()
            
            rhymes = response.json()
            return rhymes
        except:
            return []

def format_rhymes(rhymes, original_word):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∏—Ñ–º –¥–ª—è –≤—ã–≤–æ–¥–∞"""
    if not rhymes:
        return f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ä–∏—Ñ–º—ã –∫ —Å–ª–æ–≤—É '{original_word}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ!"
    
    result = f"üéµ –†–∏—Ñ–º—ã –∫ —Å–ª–æ–≤—É '{original_word}':\n\n"
    
    for i, rhyme in enumerate(rhymes[:10], 1):
        word = rhyme.get('word', '')
        score = rhyme.get('score', 0)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∏—Ñ–º—ã
        if score > 1000:
            emoji = "‚≠ê"
        elif score > 500:
            emoji = "‚ú®"
        else:
            emoji = "üí´"
        
        result += f"{i}. {emoji} {word}\n"
    
    result += f"\n–ù–∞–π–¥–µ–Ω–æ —Ä–∏—Ñ–º: {len(rhymes)}"
    return result

@bot.message_handler(commands=['start'])
def start(message):
    bot.reply_to(message, (
        "üéµ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∏—Ñ–º.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –ª—é–±–æ–µ —Å–ª–æ–≤–æ, –∏ —è –Ω–∞–π–¥—É –∫ –Ω–µ–º—É —Ä–∏—Ñ–º—ã!\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é\n\n"
        "–ü—Ä–∏–º–µ—Ä: –Ω–∞–ø–∏—à–∏ '–¥–æ–º' –∏ –ø–æ–ª—É—á–∏—à—å —Ä–∏—Ñ–º—ã!"
    ))

@bot.message_handler(commands=['help'])
def help_command(message):
    bot.reply_to(message, (
        "üéµ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:\n\n"
        "1. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –ª—é–±–æ–µ —Å–ª–æ–≤–æ\n"
        "2. –ë–æ—Ç –Ω–∞–π–¥–µ—Ç –∫ –Ω–µ–º—É —Ä–∏—Ñ–º—ã\n"
        "3. –†–∏—Ñ–º—ã –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –∫–∞—á–µ—Å—Ç–≤—É\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã —Å–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n"
        "‚Ä¢ –¥–æ–º\n"
        "‚Ä¢ –ª—é–±–æ–≤—å\n"
        "‚Ä¢ —Å–æ–ª–Ω—Ü–µ\n"
        "‚Ä¢ –ø–µ—Å–Ω—è\n\n"
        "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ä—É—Å—Å–∫–∏–º–∏ —Å–ª–æ–≤–∞–º–∏!"
    ))

@bot.message_handler(func=lambda message: True)
def handle_word(message):
    word = message.text.strip().lower()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞
    if word.startswith('/'):
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–ª–æ–≤–æ (–Ω–µ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ)
    if not word or len(word) > 50:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ (–Ω–µ –±–æ–ª–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤).")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ
    search_msg = bot.reply_to(message, f"üîç –ò—â—É —Ä–∏—Ñ–º—ã –∫ —Å–ª–æ–≤—É '{word}'...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∏—Ñ–º—ã
    rhymes = get_rhymes(word)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result = format_rhymes(rhymes, word)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    bot.edit_message_text(
        result,
        chat_id=search_msg.chat.id,
        message_id=search_msg.message_id
    )

if __name__ == '__main__':
    print('üéµ –ë–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∏—Ñ–º –∑–∞–ø—É—â–µ–Ω!')
    print('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.')
    bot.polling(none_stop=True) 